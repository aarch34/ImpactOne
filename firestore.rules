/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and their bookings,
 * while allowing public read access to venues and buses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /venues/{venueId}: Stores venue information. Public read access, but only the application can create, update, or delete.
 * - /buses/{busId}: Stores bus information. Public read access, but only the application can create, update, or delete.
 * - /users/{userId}/bookings/{bookingId}: Stores bookings made by a user. Only the user can manage their own bookings.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No listing of all users is allowed.
 * - Venue and Bus information is publicly readable but not writable by end-users.
 * - Bookings are owned by the user who created them and stored under the user's profile.
 *
 * Denormalization for Authorization:
 * - Bookings are stored under /users/{userId}/bookings/{bookingId} to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's ID matches the userId.
     * @deny (get, create, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to venues.
     * @path /venues/{venueId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No user write access is allowed.
     * @principle Allows public read access to venue information, but restricts write access.
     */
    match /venues/{venueId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to buses.
     * @path /buses/{busId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No user write access is allowed.
     * @principle Allows public read access to bus information, but restricts write access.
     */
    match /buses/{busId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to bookings made by a user.
     * @path /users/{userId}/bookings/{bookingId}
     * @allow (get, create, update, delete, list) if the authenticated user's ID matches the userId.
     * @deny (get, create, update, delete, list) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for bookings.
     */
    match /users/{userId}/bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}