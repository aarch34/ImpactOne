{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "role": {
          "type": "string",
          "description": "Role of the user (e.g., Faculty, Department Head, Admin)."
        },
        "department": {
          "type": "string",
          "description": "The department the user belongs to (e.g., Engineering, Architecture, MBA)."
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "role",
        "department"
      ]
    },
    "Venue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Venue",
      "type": "object",
      "description": "Represents a bookable venue.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the venue."
        },
        "name": {
          "type": "string",
          "description": "Name of the venue (e.g., Auditorium, Impact Green, Ramanujan Hall)."
        },
        "seatingCapacity": {
          "type": "number",
          "description": "The seating capacity of the venue."
        },
        "facilities": {
          "type": "array",
          "description": "List of facilities available at the venue.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "seatingCapacity",
        "facilities"
      ]
    },
    "Booking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Booking",
      "type": "object",
      "description": "Represents a booking made by a user for a venue.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the booking."
        },
        "requesterId": {
          "type": "string",
          "description": "The ID of the user who made the booking."
        },
        "venueId": {
          "type": "string",
          "description": "Reference to Venue. (Relationship: Venue 1:N Booking)"
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the booking.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the booking.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the booking (e.g., requested, approved, rejected)."
        },
        "reason": {
          "type": "string",
          "description": "Reason for booking"
        }
      },
      "required": [
        "id",
        "requesterId",
        "venueId",
        "startTime",
        "endTime",
        "status",
        "reason"
      ]
    },
    "Bus": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bus",
      "type": "object",
      "description": "Represents a bookable bus.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bus."
        },
        "name": {
          "type": "string",
          "description": "Name of the bus."
        },
        "seatingCapacity": {
          "type": "number",
          "description": "The seating capacity of the bus."
        },
        "facilities": {
          "type": "array",
          "description": "List of facilities available on the bus.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "seatingCapacity",
        "facilities"
      ]
    }
  },
  "auth": {
    "providers": [
      "password"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles, indexed by user ID. This allows for path-based ownership for user-specific data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/venues/{venueId}",
        "definition": {
          "entityName": "Venue",
          "schema": {
            "$ref": "#/backend/entities/Venue"
          },
          "description": "Stores venue information. Venues are global resources, so they reside in a root-level collection.",
          "params": [
            {
              "name": "venueId",
              "description": "The unique identifier for the venue."
            }
          ]
        }
      },
      {
        "path": "/buses/{busId}",
        "definition": {
          "entityName": "Bus",
          "schema": {
            "$ref": "#/backend/entities/Bus"
          },
          "description": "Stores bus information. Buses are global resources, so they reside in a root-level collection.",
          "params": [
            {
              "name": "busId",
              "description": "The unique identifier for the bus."
            }
          ]
        }
      },
      {
        "path": "/bookings/{bookingId}",
        "definition": {
          "entityName": "Booking",
          "schema": {
            "$ref": "#/backend/entities/Booking"
          },
          "description": "Stores all booking requests in a single root-level collection. This allows admins to easily query and manage all bookings. The 'requesterId' field is used for ownership checks in security rules.",
          "params": [
            {
              "name": "bookingId",
              "description": "The unique identifier for the booking."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. User data is stored in a dedicated collection (`users`). Venue and Bus data are stored in root-level collections (`venues` and `buses`). Bookings are now stored in a single root-level collection (`bookings`) to allow for global queries by an admin. Each booking contains a `requesterId` to link back to the user and enforce ownership-based security rules for non-admin users."
  }
}
